

// 탐색이란
// 탐색은 하나 이상의 필드(field) 로 구성되는 레코드(record)의 집합에서 원하는 레코드를 찾아내는 작업이다
// 보통 이러한 레코드들의 집합을 테이블(table) 이라고 부른다
// 레코드들은 서로 중복되지 않고 고유한 값을 가지는 키를 가지는데
// 이것을 탐색키(search key) 라 부른다, 결국 자료를 검색하는 것은 테이블에서 원하는 탐색키를 가진 레코드를 찾는 것이다


// 맵 이란
// 맵은 탐색을 위한 자료구조이다
// 맵(map) 또는 사전(dictionary)은 자료를 저장하고 키를 이용해 원하는 자료를 빠르게 찾을 수 있도록 하는 자료구조를 말한다
// 맵은 키를 가진 레코드(keyed record) 또는 앤트리(entry) 라 불리는 키-값 쌍(key, value)을 테이블에 저장한다
// 이때 각 키는 유일하고 맵에 저장되는 키와 값은 어떠한 자료형도 가능하다

// 맵에서도 가장 중요한 연산은 삽입, 검색, 삭제 이다
// 이것은 테이블에 새로운 레코드를 추가하거나, 원하는 레코드를 검색하고, 어떤 레코드를 삭제하는 것이다

// 맵을 구현하는 가장 간단한 방법은 배열이다
// 그러나 맵의 탐색 성능을 향상하고자 한다면 이진 탐색 트리와 같은 보다 효율적인 자료구조의 사용을 고민해야 할 것이다

// 여기에서는 맵을 구현하는 방법 4가지를 배운다
/*
	1. 정렬되지 않은 배열을 사용하는 방법
	2. 정렬된 배열을 이용하는 방법
	3. 이진 탐색 트리를 이용하는 방법
	4. 해싱을 이용하는 방법
*/

// 맵은 구현하는 방법에 따라 탐색 연산의 시간 복잡도가 달라진다
// 정렬되지 않은 배열을 이용한다면 O(n) 의 시간이 걸린다
// 정렬된 배열을 사용하면 탐색 시간을 O(log n) 로 향상시킬 수 있다
// 이진 탐색 트리도 균형을 잘 맞춘다면 O(log n) 의 시간에 원하는 탐색을 마칠 수 있다
// 만약 해싱(hashing) 이라는 기법을 잘 사용한다면 저장된 레코드의 수에 상관없이 항상 일정한 시간안에(O(1)) 원하는 레코드를 찾을 수 있다
// 따라서 맵을 가장 효율적으로 구현할 수 있는 방법이 해싱이다
// 해싱은 탐색키의 비교가 아닌 탐색키를 수식에 적용시켜서 바로 레코드가 저장된 위치를 얻는다